Golang Logging

242. Pengenalan Logging
- Log file adalah file yang berisi informasi kejadian dari sebuah sistem
- Biasanya dalam log file, terdapat informasi waktu kejadian dan pesan kejadian
- Logging adalah aksi menambah informasi log ke log file
- Logging sudah menjadi standar industri untuk menampilkan informasi yang terjadi di aplikasi yang kita buat
- Logging bukan hanya untuk menampilkan informasi, kadang digunakan untuk proses debugging ketika terjadi masalah di aplikasi kita

243. Logging Library
- Golang sudah menyediakan package log tetapi fiturnya terbatas
- Pada kelas ini  kita tidak akan menggunakan package log di golang untuk belajar logging
- Contoh logging library:
  a. Logrus: github.com/sirupsesn/logrus
  b. Zap: github.com/uber-go/zap
  c. Zerolog: github.com/rs/zerolog
- Pada kelas ini kita akan menggunakan logrus
- Logrus adalah library logging untuk golang yang saat ini paling populer

244. Membuat Project
- Buka terminal
- go mod init belajar-golang-logger

245. Logger
- Logger adalah struct utama pada Logrus untuk melakukan logging
- Untuk membuat Logger, kita bisa menggunakan function New() pada package logrus
- Dan hasil dari function New() adalah sebuah pointer Logger

246. Level
- Dalam logging, hal yang paling pending adalah level
- Level adalah penentuan prioritas atau jenis dari sebuah kejadian
- Level itu dimulai dari level terendah sampai level tertinggi
- Logrus mendukung banyak sekali level
- Urutan level:
  Trace, Debug, Info, Warn, Error, Fatal, Panic
- Kenapa Trace dan Debug tidak keluar di level?
  Karena secara default, logging level yang digunakan adalah info artinya hanya prioritas info keatas yang di log
- Untuk mengubah logging level, kita bisa gunakan logger.SetLevel()

247. Output
- Secara umum, output tujuan log yang kita kirim via logrus adalah ke Console
- Kadang kita butuh mengubah output tujuan log, misal ke File atau Database
- Output logger adalah io.Writer, jadi kita bisa menggunakan io.Writer dari Golang atau bisa membuat sendiri kontrak io.Writer

248. Formatter
- Saat logger mengirim data ke output, log yang kita kirim akan diformat menggunakan object Formatter
- Logrus secara default memiliki dua formatter:
  a. TextFormatter: Default
  b. JSONFormatter: memformat pesan log menjadi JSON
- Untuk mengubah formatter, kita bisa gunakan logger.SetFormatter()

249. Field
- Saat mengirim informasi log, kadang kita ingin menyisipkan sesuatu pada log tersebut
- Misal, informasi siapa yang login di log nya
- Cara manual kita bisa menambahkan di message nya, tapi logrus menyediakan cara yang lebih baik yaitu menggunakan fitur Field
- Dengan fitur field, kita bisa menambahkan Field tambahan di informasi Log yang kita kirim
- Sebelum melakukan logging, kita bisa gunakan logger.WithField() untuk menambahkan Field yang kita inginkan
- Fields:
  a. Atau kita juga bisa memasukkan beberapa Field dengan menggunakan Fields
  b. Fields adalah alias untuk map[string]interface{}
  c. Caranya kita bisa menggunakan function logger.WithFields()

250. Entry
- Entry adalah sebuat struct representasi dari log yang kita kirim menggunakan Logrus Logger
- Entry adalah object yang kita kirim ke formatter
- Setiap log yang kita kirim, maka akan dibuatkan object Entry
- Contohnya ketika kita membuat formatter sendiri, maka parameter yang kita dapat untuk melakukan formatting bukanlah string message, 
  melainkan object Entry
- Untuk membuat entry, kita bisa menggunakan logger.NewEntry()
